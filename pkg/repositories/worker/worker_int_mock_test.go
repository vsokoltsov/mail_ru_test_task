// Code generated by MockGen. DO NOT EDIT.
// Source: worker_int.go

// Package worker is a generated GoMock package.
package worker

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
	models "relap/pkg/models"
)

// MockWorkersReadPoolInt is a mock of WorkersReadPoolInt interface
type MockWorkersReadPoolInt struct {
	ctrl     *gomock.Controller
	recorder *MockWorkersReadPoolIntMockRecorder
}

// MockWorkersReadPoolIntMockRecorder is the mock recorder for MockWorkersReadPoolInt
type MockWorkersReadPoolIntMockRecorder struct {
	mock *MockWorkersReadPoolInt
}

// NewMockWorkersReadPoolInt creates a new mock instance
func NewMockWorkersReadPoolInt(ctrl *gomock.Controller) *MockWorkersReadPoolInt {
	mock := &MockWorkersReadPoolInt{ctrl: ctrl}
	mock.recorder = &MockWorkersReadPoolIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkersReadPoolInt) EXPECT() *MockWorkersReadPoolIntMockRecorder {
	return m.recorder
}

// StartWorkers mocks base method
func (m *MockWorkersReadPoolInt) StartWorkers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorkers")
}

// StartWorkers indicates an expected call of StartWorkers
func (mr *MockWorkersReadPoolIntMockRecorder) StartWorkers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkers", reflect.TypeOf((*MockWorkersReadPoolInt)(nil).StartWorkers))
}

// ReadFromChannels mocks base method
func (m *MockWorkersReadPoolInt) ReadFromChannels(results chan models.Result, errors chan error) (map[string][]*models.ResultData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromChannels", results, errors)
	ret0, _ := ret[0].(map[string][]*models.ResultData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromChannels indicates an expected call of ReadFromChannels
func (mr *MockWorkersReadPoolIntMockRecorder) ReadFromChannels(results, errors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromChannels", reflect.TypeOf((*MockWorkersReadPoolInt)(nil).ReadFromChannels), results, errors)
}

// listenJobs mocks base method
func (m *MockWorkersReadPoolInt) listenJobs(id int, jobs <-chan models.Job, results chan<- models.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listenJobs", id, jobs, results)
}

// listenJobs indicates an expected call of listenJobs
func (mr *MockWorkersReadPoolIntMockRecorder) listenJobs(id, jobs, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listenJobs", reflect.TypeOf((*MockWorkersReadPoolInt)(nil).listenJobs), id, jobs, results)
}

// MockWorkersWritePoolInt is a mock of WorkersWritePoolInt interface
type MockWorkersWritePoolInt struct {
	ctrl     *gomock.Controller
	recorder *MockWorkersWritePoolIntMockRecorder
}

// MockWorkersWritePoolIntMockRecorder is the mock recorder for MockWorkersWritePoolInt
type MockWorkersWritePoolIntMockRecorder struct {
	mock *MockWorkersWritePoolInt
}

// NewMockWorkersWritePoolInt creates a new mock instance
func NewMockWorkersWritePoolInt(ctrl *gomock.Controller) *MockWorkersWritePoolInt {
	mock := &MockWorkersWritePoolInt{ctrl: ctrl}
	mock.recorder = &MockWorkersWritePoolIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkersWritePoolInt) EXPECT() *MockWorkersWritePoolIntMockRecorder {
	return m.recorder
}

// StartWorkers mocks base method
func (m *MockWorkersWritePoolInt) StartWorkers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorkers")
}

// StartWorkers indicates an expected call of StartWorkers
func (mr *MockWorkersWritePoolIntMockRecorder) StartWorkers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkers", reflect.TypeOf((*MockWorkersWritePoolInt)(nil).StartWorkers))
}

// ListenWriteJobs mocks base method
func (m *MockWorkersWritePoolInt) ListenWriteJobs(id int, jobs <-chan models.CategoryJob, results chan<- *os.File) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenWriteJobs", id, jobs, results)
}

// ListenWriteJobs indicates an expected call of ListenWriteJobs
func (mr *MockWorkersWritePoolIntMockRecorder) ListenWriteJobs(id, jobs, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenWriteJobs", reflect.TypeOf((*MockWorkersWritePoolInt)(nil).ListenWriteJobs), id, jobs, results)
}

// MockWorkerInt is a mock of WorkerInt interface
type MockWorkerInt struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerIntMockRecorder
}

// MockWorkerIntMockRecorder is the mock recorder for MockWorkerInt
type MockWorkerIntMockRecorder struct {
	mock *MockWorkerInt
}

// NewMockWorkerInt creates a new mock instance
func NewMockWorkerInt(ctrl *gomock.Controller) *MockWorkerInt {
	mock := &MockWorkerInt{ctrl: ctrl}
	mock.recorder = &MockWorkerIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkerInt) EXPECT() *MockWorkerIntMockRecorder {
	return m.recorder
}

// FetchPage mocks base method
func (m *MockWorkerInt) FetchPage(url string, categories []string) (*models.ResultData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPage", url, categories)
	ret0, _ := ret[0].(*models.ResultData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPage indicates an expected call of FetchPage
func (mr *MockWorkerIntMockRecorder) FetchPage(url, categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPage", reflect.TypeOf((*MockWorkerInt)(nil).FetchPage), url, categories)
}
