// Code generated by MockGen. DO NOT EDIT.
// Source: storage_int.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockInt is a mock of Int interface
type MockInt struct {
	ctrl     *gomock.Controller
	recorder *MockIntMockRecorder
}

// MockIntMockRecorder is the mock recorder for MockInt
type MockIntMockRecorder struct {
	mock *MockInt
}

// NewMockInt creates a new mock instance
func NewMockInt(ctrl *gomock.Controller) *MockInt {
	mock := &MockInt{ctrl: ctrl}
	mock.recorder = &MockIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInt) EXPECT() *MockIntMockRecorder {
	return m.recorder
}

// OpenFile mocks base method
func (m *MockInt) OpenFile(path string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", path, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockIntMockRecorder) OpenFile(path, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockInt)(nil).OpenFile), path, flag, perm)
}

// CreateFile mocks base method
func (m *MockInt) CreateFile(path string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", path, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockIntMockRecorder) CreateFile(path, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockInt)(nil).CreateFile), path, flag, perm)
}

// ResultPath mocks base method
func (m *MockInt) ResultPath(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResultPath", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResultPath indicates an expected call of ResultPath
func (mr *MockIntMockRecorder) ResultPath(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultPath", reflect.TypeOf((*MockInt)(nil).ResultPath), name)
}
